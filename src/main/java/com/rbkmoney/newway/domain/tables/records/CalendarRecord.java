/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables.records;


import com.rbkmoney.newway.domain.tables.Calendar;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalendarRecord extends UpdatableRecordImpl<CalendarRecord> implements Record10<Long, Long, Integer, String, String, LocalDateTime, String, Integer, LocalDateTime, Boolean> {

    private static final long serialVersionUID = 1791946644;

    /**
     * Setter for <code>nw.calendar.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>nw.calendar.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>nw.calendar.version_id</code>.
     */
    public void setVersionId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>nw.calendar.version_id</code>.
     */
    public Long getVersionId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>nw.calendar.calendar_ref_id</code>.
     */
    public void setCalendarRefId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>nw.calendar.calendar_ref_id</code>.
     */
    public Integer getCalendarRefId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>nw.calendar.name</code>.
     */
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>nw.calendar.name</code>.
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>nw.calendar.description</code>.
     */
    public void setDescription(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>nw.calendar.description</code>.
     */
    public String getDescription() {
        return (String) get(4);
    }

    /**
     * Setter for <code>nw.calendar.timezone</code>.
     */
    public void setTimezone(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>nw.calendar.timezone</code>.
     */
    public LocalDateTime getTimezone() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>nw.calendar.holidays_json</code>.
     */
    public void setHolidaysJson(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>nw.calendar.holidays_json</code>.
     */
    public String getHolidaysJson() {
        return (String) get(6);
    }

    /**
     * Setter for <code>nw.calendar.first_day_of_week</code>.
     */
    public void setFirstDayOfWeek(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>nw.calendar.first_day_of_week</code>.
     */
    public Integer getFirstDayOfWeek() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>nw.calendar.wtime</code>.
     */
    public void setWtime(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>nw.calendar.wtime</code>.
     */
    public LocalDateTime getWtime() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>nw.calendar.current</code>.
     */
    public void setCurrent(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>nw.calendar.current</code>.
     */
    public Boolean getCurrent() {
        return (Boolean) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Long, Long, Integer, String, String, LocalDateTime, String, Integer, LocalDateTime, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Long, Long, Integer, String, String, LocalDateTime, String, Integer, LocalDateTime, Boolean> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Calendar.CALENDAR.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return Calendar.CALENDAR.VERSION_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Calendar.CALENDAR.CALENDAR_REF_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Calendar.CALENDAR.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Calendar.CALENDAR.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field6() {
        return Calendar.CALENDAR.TIMEZONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return Calendar.CALENDAR.HOLIDAYS_JSON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return Calendar.CALENDAR.FIRST_DAY_OF_WEEK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field9() {
        return Calendar.CALENDAR.WTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field10() {
        return Calendar.CALENDAR.CURRENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getVersionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getCalendarRefId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value6() {
        return getTimezone();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getHolidaysJson();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getFirstDayOfWeek();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value9() {
        return getWtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value10() {
        return getCurrent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value2(Long value) {
        setVersionId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value3(Integer value) {
        setCalendarRefId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value4(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value5(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value6(LocalDateTime value) {
        setTimezone(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value7(String value) {
        setHolidaysJson(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value8(Integer value) {
        setFirstDayOfWeek(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value9(LocalDateTime value) {
        setWtime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord value10(Boolean value) {
        setCurrent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalendarRecord values(Long value1, Long value2, Integer value3, String value4, String value5, LocalDateTime value6, String value7, Integer value8, LocalDateTime value9, Boolean value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CalendarRecord
     */
    public CalendarRecord() {
        super(Calendar.CALENDAR);
    }

    /**
     * Create a detached, initialised CalendarRecord
     */
    public CalendarRecord(Long id, Long versionId, Integer calendarRefId, String name, String description, LocalDateTime timezone, String holidaysJson, Integer firstDayOfWeek, LocalDateTime wtime, Boolean current) {
        super(Calendar.CALENDAR);

        set(0, id);
        set(1, versionId);
        set(2, calendarRefId);
        set(3, name);
        set(4, description);
        set(5, timezone);
        set(6, holidaysJson);
        set(7, firstDayOfWeek);
        set(8, wtime);
        set(9, current);
    }
}
