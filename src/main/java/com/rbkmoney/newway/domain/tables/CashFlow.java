/*
 * This file is generated by jOOQ.
 */
package com.rbkmoney.newway.domain.tables;


import com.rbkmoney.newway.domain.Indexes;
import com.rbkmoney.newway.domain.Keys;
import com.rbkmoney.newway.domain.Nw;
import com.rbkmoney.newway.domain.enums.AdjustmentCashFlowType;
import com.rbkmoney.newway.domain.enums.CashFlowAccount;
import com.rbkmoney.newway.domain.enums.PaymentChangeType;
import com.rbkmoney.newway.domain.tables.records.CashFlowRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CashFlow extends TableImpl<CashFlowRecord> {

    private static final long serialVersionUID = 643055913;

    /**
     * The reference instance of <code>nw.cash_flow</code>
     */
    public static final CashFlow CASH_FLOW = new CashFlow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CashFlowRecord> getRecordType() {
        return CashFlowRecord.class;
    }

    /**
     * The column <code>nw.cash_flow.id</code>.
     */
    public final TableField<CashFlowRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('nw.cash_flow_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nw.cash_flow.obj_id</code>.
     */
    public final TableField<CashFlowRecord, Long> OBJ_ID = createField("obj_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.obj_type</code>.
     */
    public final TableField<CashFlowRecord, PaymentChangeType> OBJ_TYPE = createField("obj_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.newway.domain.enums.PaymentChangeType.class), this, "");

    /**
     * The column <code>nw.cash_flow.adj_flow_type</code>.
     */
    public final TableField<CashFlowRecord, AdjustmentCashFlowType> ADJ_FLOW_TYPE = createField("adj_flow_type", org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.AdjustmentCashFlowType.class), this, "");

    /**
     * The column <code>nw.cash_flow.source_account_type</code>.
     */
    public final TableField<CashFlowRecord, CashFlowAccount> SOURCE_ACCOUNT_TYPE = createField("source_account_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.newway.domain.enums.CashFlowAccount.class), this, "");

    /**
     * The column <code>nw.cash_flow.source_account_type_value</code>.
     */
    public final TableField<CashFlowRecord, String> SOURCE_ACCOUNT_TYPE_VALUE = createField("source_account_type_value", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.source_account_id</code>.
     */
    public final TableField<CashFlowRecord, Long> SOURCE_ACCOUNT_ID = createField("source_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.destination_account_type</code>.
     */
    public final TableField<CashFlowRecord, CashFlowAccount> DESTINATION_ACCOUNT_TYPE = createField("destination_account_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.rbkmoney.newway.domain.enums.CashFlowAccount.class), this, "");

    /**
     * The column <code>nw.cash_flow.destination_account_type_value</code>.
     */
    public final TableField<CashFlowRecord, String> DESTINATION_ACCOUNT_TYPE_VALUE = createField("destination_account_type_value", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.destination_account_id</code>.
     */
    public final TableField<CashFlowRecord, Long> DESTINATION_ACCOUNT_ID = createField("destination_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.amount</code>.
     */
    public final TableField<CashFlowRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.currency_code</code>.
     */
    public final TableField<CashFlowRecord, String> CURRENCY_CODE = createField("currency_code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.cash_flow.details</code>.
     */
    public final TableField<CashFlowRecord, String> DETAILS = createField("details", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>nw.cash_flow</code> table reference
     */
    public CashFlow() {
        this(DSL.name("cash_flow"), null);
    }

    /**
     * Create an aliased <code>nw.cash_flow</code> table reference
     */
    public CashFlow(String alias) {
        this(DSL.name(alias), CASH_FLOW);
    }

    /**
     * Create an aliased <code>nw.cash_flow</code> table reference
     */
    public CashFlow(Name alias) {
        this(alias, CASH_FLOW);
    }

    private CashFlow(Name alias, Table<CashFlowRecord> aliased) {
        this(alias, aliased, null);
    }

    private CashFlow(Name alias, Table<CashFlowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CashFlow(Table<O> child, ForeignKey<O, CashFlowRecord> key) {
        super(child, key, CASH_FLOW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nw.NW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CASH_FLOW_IDX, Indexes.CASH_FLOW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CashFlowRecord, Long> getIdentity() {
        return Keys.IDENTITY_CASH_FLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CashFlowRecord> getPrimaryKey() {
        return Keys.CASH_FLOW_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CashFlowRecord>> getKeys() {
        return Arrays.<UniqueKey<CashFlowRecord>>asList(Keys.CASH_FLOW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CashFlow as(String alias) {
        return new CashFlow(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CashFlow as(Name alias) {
        return new CashFlow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CashFlow rename(String name) {
        return new CashFlow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CashFlow rename(Name name) {
        return new CashFlow(name, null);
    }
}
