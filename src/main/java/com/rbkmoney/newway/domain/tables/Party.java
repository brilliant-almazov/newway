/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables;


import com.rbkmoney.newway.domain.Keys;
import com.rbkmoney.newway.domain.Nw;
import com.rbkmoney.newway.domain.enums.Blocking;
import com.rbkmoney.newway.domain.enums.Suspension;
import com.rbkmoney.newway.domain.tables.records.PartyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Party extends TableImpl<PartyRecord> {

    private static final long serialVersionUID = -1694050587;

    /**
     * The reference instance of <code>nw.party</code>
     */
    public static final Party PARTY = new Party();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyRecord> getRecordType() {
        return PartyRecord.class;
    }

    /**
     * The column <code>nw.party.id</code>.
     */
    public final TableField<PartyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('nw.party_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nw.party.event_id</code>.
     */
    public final TableField<PartyRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.party.event_created_at</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> EVENT_CREATED_AT = createField("event_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>nw.party.party_id</code>.
     */
    public final TableField<PartyRecord, String> PARTY_ID = createField("party_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.party.contact_info_email</code>.
     */
    public final TableField<PartyRecord, String> CONTACT_INFO_EMAIL = createField("contact_info_email", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.party.created_at</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>nw.party.blocking</code>.
     */
    public final TableField<PartyRecord, Blocking> BLOCKING = createField("blocking", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.Blocking.class), this, "");

    /**
     * The column <code>nw.party.blocking_unblocked_reason</code>.
     */
    public final TableField<PartyRecord, String> BLOCKING_UNBLOCKED_REASON = createField("blocking_unblocked_reason", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.party.blocking_unblocked_since</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> BLOCKING_UNBLOCKED_SINCE = createField("blocking_unblocked_since", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.party.blocking_blocked_reason</code>.
     */
    public final TableField<PartyRecord, String> BLOCKING_BLOCKED_REASON = createField("blocking_blocked_reason", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.party.blocking_blocked_since</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> BLOCKING_BLOCKED_SINCE = createField("blocking_blocked_since", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.party.suspension</code>.
     */
    public final TableField<PartyRecord, Suspension> SUSPENSION = createField("suspension", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.Suspension.class), this, "");

    /**
     * The column <code>nw.party.suspension_active_since</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> SUSPENSION_ACTIVE_SINCE = createField("suspension_active_since", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.party.suspension_suspended_since</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> SUSPENSION_SUSPENDED_SINCE = createField("suspension_suspended_since", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.party.revision</code>.
     */
    public final TableField<PartyRecord, Long> REVISION = createField("revision", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.party.revision_changed_at</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> REVISION_CHANGED_AT = createField("revision_changed_at", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.party.party_meta_set_ns</code>.
     */
    public final TableField<PartyRecord, String> PARTY_META_SET_NS = createField("party_meta_set_ns", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.party.party_meta_set_data_json</code>.
     */
    public final TableField<PartyRecord, String> PARTY_META_SET_DATA_JSON = createField("party_meta_set_data_json", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.party.wtime</code>.
     */
    public final TableField<PartyRecord, LocalDateTime> WTIME = createField("wtime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>nw.party.current</code>.
     */
    public final TableField<PartyRecord, Boolean> CURRENT = createField("current", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>nw.party</code> table reference
     */
    public Party() {
        this("party", null);
    }

    /**
     * Create an aliased <code>nw.party</code> table reference
     */
    public Party(String alias) {
        this(alias, PARTY);
    }

    private Party(String alias, Table<PartyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Party(String alias, Table<PartyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nw.NW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PartyRecord, Long> getIdentity() {
        return Keys.IDENTITY_PARTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PartyRecord> getPrimaryKey() {
        return Keys.PARTY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PartyRecord>> getKeys() {
        return Arrays.<UniqueKey<PartyRecord>>asList(Keys.PARTY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Party as(String alias) {
        return new Party(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(String name) {
        return new Party(name, null);
    }
}
