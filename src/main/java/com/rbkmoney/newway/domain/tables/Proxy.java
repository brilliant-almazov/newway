/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables;


import com.rbkmoney.newway.domain.Keys;
import com.rbkmoney.newway.domain.Nw;
import com.rbkmoney.newway.domain.tables.records.ProxyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proxy extends TableImpl<ProxyRecord> {

    private static final long serialVersionUID = -2718684;

    /**
     * The reference instance of <code>nw.proxy</code>
     */
    public static final Proxy PROXY = new Proxy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProxyRecord> getRecordType() {
        return ProxyRecord.class;
    }

    /**
     * The column <code>nw.proxy.id</code>.
     */
    public final TableField<ProxyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('nw.proxy_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nw.proxy.version_id</code>.
     */
    public final TableField<ProxyRecord, Long> VERSION_ID = createField("version_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.proxy.proxy_ref_id</code>.
     */
    public final TableField<ProxyRecord, Integer> PROXY_REF_ID = createField("proxy_ref_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>nw.proxy.name</code>.
     */
    public final TableField<ProxyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.proxy.description</code>.
     */
    public final TableField<ProxyRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.proxy.url</code>.
     */
    public final TableField<ProxyRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.proxy.options_json</code>.
     */
    public final TableField<ProxyRecord, String> OPTIONS_JSON = createField("options_json", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.proxy.wtime</code>.
     */
    public final TableField<ProxyRecord, LocalDateTime> WTIME = createField("wtime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>nw.proxy.current</code>.
     */
    public final TableField<ProxyRecord, Boolean> CURRENT = createField("current", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>nw.proxy</code> table reference
     */
    public Proxy() {
        this("proxy", null);
    }

    /**
     * Create an aliased <code>nw.proxy</code> table reference
     */
    public Proxy(String alias) {
        this(alias, PROXY);
    }

    private Proxy(String alias, Table<ProxyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Proxy(String alias, Table<ProxyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nw.NW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProxyRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROXY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProxyRecord> getPrimaryKey() {
        return Keys.PROXY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProxyRecord>> getKeys() {
        return Arrays.<UniqueKey<ProxyRecord>>asList(Keys.PROXY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proxy as(String alias) {
        return new Proxy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proxy rename(String name) {
        return new Proxy(name, null);
    }
}
